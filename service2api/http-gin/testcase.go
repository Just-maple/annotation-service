package gin

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"io/ioutil"
	"strings"
	"text/template"

	"github.com/iancoleman/strcase"
	"golang.org/x/tools/imports"
)

type ApiTestTemplate struct {
	Package       string
	TesterFactory string
	Tests         []ApiTestCase
}

type ApiTestCase struct {
	Router   string
	Method   string
	TestName string
	TestFunc string
	Return   string
	Param    string
	Title    string
	Jumper   string
}

var testTemplate = template.Must(template.New("test").Parse(
	`// Code generated by service2api
	package {{ .Package }}
	
	var tester itest.HttpTester = {{ .TesterFactory }}
	
	{{ range .Tests }}
	{{ if .Title }}// {{ .Title }}
	{{ end }}func Test{{ .TestName }}(t *testing.T) {
		var (
		_ = {{ .Jumper }} // click me to interface
		url = {{ .Router }}
		method = http.Method{{ .Method }}
		tests = []struct {
			userID string
			{{ if .Param }}param {{ .Param }}
			{{ end }}{{ if .Return }}auth  func(ret {{.Return}}) (ok bool)
			{{ end }}wantFailed bool
		}{
			// todo: fill your params
			{},
		}
		)
		for i, test := range tests {
			t.Run("{{ .Title }} - "+strconv.Itoa(i), func(t *testing.T) {
				res, err := {{ .TestFunc }}(method, url, test.userID, {{ if .Param }}test.param{{ else }}nil{{ end }})
				if test.wantFailed{
					if  (err == nil){ 
					t.Fatal(err)
					}else{
					return
					}
				}else if err != nil {
					t.Fatal(err)
				}
				{{ if .Return }}var ret {{ .Return }}
				if err = res.Unmarshal(&ret); err != nil {
					t.Fatal(err)
				}
				if test.auth != nil && !test.auth(ret) {
					t.Fatal()
				}{{ else }}t.Log(res){{ end }}
				res.Report()
			})
		}
	}
	{{ end }}`))

func GenApiTest(a ApiTestTemplate) (res []byte, err error) {
	for i := range a.Tests {
		if a.Tests[i].TestName == "" {
			base := strcase.ToCamel(strings.Replace(a.Tests[i].Router, "/", "_", -1))
			a.Tests[i].TestName = strings.ToUpper(a.Tests[i].Method) + base
		}
	}
	var b bytes.Buffer
	err = testTemplate.Execute(&b, a)
	if err != nil {
		return
	}
	res, err = imports.Process("", b.Bytes(), nil)
	if err != nil {
		fmt.Printf("%s", b.Bytes())
	}
	return
}

func WriteTestFile(fileName string, testcases ApiTestTemplate, overwriteTest bool) (err error) {
	testGen, err := GenApiTest(testcases)
	if err != nil {
		panic(err)
	}
	fileData, errOpen := ioutil.ReadFile(fileName)
	// 已存在文件
	fs := token.NewFileSet()
	f, _ := parser.ParseFile(fs, "", fileData, parser.ParseComments)
	if errOpen != nil || f == nil || overwriteTest {
		err = ioutil.WriteFile(fileName, testGen, 0664)
		return
	}
	fs2 := token.NewFileSet()
	f2, _ := parser.ParseFile(fs2, "", testGen, parser.ParseComments)
	fm := make(map[string]*ast.FuncDecl)
	for _, s := range f2.Decls {
		d, ok := s.(*ast.FuncDecl)
		if !ok {
			continue
		}
		fm[d.Name.Name] = d
	}
	output := bytes.NewBuffer(fileData)
	for _, test := range testcases.Tests {
		tName := "Test" + test.TestName
		if decl := f.Scope.Lookup(tName); decl != nil && decl.Decl != nil {
			if _, ok := decl.Decl.(*ast.FuncDecl); ok {
				fmt.Printf("\033[36m%s\033[0m exist\n", tName)
				continue
			}
		}
		var tmp bytes.Buffer
		err = format.Node(&tmp, fs2, fm[tName])
		if err != nil {
			return
		}
		output.Write(append(tmp.Bytes(), "\n\n"...))
	}
	err = ioutil.WriteFile(fileName, output.Bytes(), 0664)
	return
}
